{"version":3,"file":"static/js/357.7523e31e.chunk.js","mappings":"4MAIaA,EAAY,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,GAAIC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YACrCC,GAAWC,EAAAA,EAAAA,MACXC,GAAMC,EAAAA,EAAAA,GAAUJ,GAEtB,OACE,eAAIK,UAAU,aAAd,UACE,UAAC,KAAD,CAAMC,GAAE,kBAAaT,GAAMU,MAAO,CAAEC,KAAMP,GAA1C,WACE,gBAAKI,UAAU,eAAeF,IAAKA,EAAKM,IAAKX,GAASC,IACrDD,GAASC,MAHkBF,EAOnC,ECbYa,EAAY,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAC1B,OACE,wBACGA,EAAOC,KAAI,SAAAC,GACV,OACE,SAACjB,EAAD,CAEEC,GAAIgB,EAAMhB,GACVC,MAAOe,EAAMf,MACbC,KAAMc,EAAMd,KACZC,YAAaa,EAAMb,aAJda,EAAMhB,GAOhB,KAGN,C,qJCZYiB,EAAO,WAClB,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOJ,EAAP,KAAeK,EAAf,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KAgBA,OAdAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAmB,mCAAG,oGAExBF,GAAW,GAFa,UAGCG,EAAAA,EAAAA,MAHD,OAGlBC,EAHkB,OAIxBN,EAAUM,GAJc,gDAMxBC,QAAQC,IAAR,MANwB,yBAQxBN,GAAW,GARa,4EAAH,qDAWzBE,GACD,GAAE,KAED,4BACE,uBAAG,oBACFH,IACC,SAAC,KAAD,CACEQ,OAAO,KACPC,MAAM,KACNC,OAAO,IACPC,MAAM,UACNC,UAAU,qBACVC,aAAc,CAAC,EACfC,iBAAiB,GACjBC,SAAS,KAGb,SAAC,IAAD,CAAWrB,OAAQA,MAGxB,EAED,W,+LC5CMsB,EAAM,gCACNC,EAAU,mCAEVb,EAAiB,mCAAG,oGACDc,EAAAA,EAAAA,IAAA,UAAaF,EAAb,oCAA4CC,IAD3C,cAClBE,EADkB,yBAGjBA,EAASC,KAAKC,SAHG,2CAAH,qDAMjBC,EAAS,mCAAG,WAAMC,GAAN,uFACOL,EAAAA,EAAAA,IAAA,UAClBF,EADkB,gCACSC,EADT,kBAC0BM,IAFjC,cACVJ,EADU,yBAKTA,EAASC,KAAKC,SALL,2CAAH,sDAQTG,EAAe,mCAAG,WAAMC,GAAN,uFACCP,EAAAA,EAAAA,IAAA,UAAaF,EAAb,iBAAyBS,EAAzB,oBAA4CR,IAD7C,cAChBE,EADgB,yBAGfA,EAASC,MAHM,2CAAH,sDAMfM,EAAc,mCAAG,WAAMD,GAAN,uFACEP,EAAAA,EAAAA,IAAA,UAClBF,EADkB,iBACNS,EADM,4BACqBR,IAFvB,cACfE,EADe,yBAKdA,EAASC,KAAKO,MALA,2CAAH,sDAQdC,EAAS,mCAAG,WAAMH,GAAN,uFACOP,EAAAA,EAAAA,IAAA,UAClBF,EADkB,iBACNS,EADM,4BACqBR,IAF5B,cACVE,EADU,OAKhBb,QAAQC,IAAI,SAAUY,EAASC,KAAKC,SALpB,kBAMTF,EAASC,KAAKC,SANL,2CAAH,qD,uHC/BR,SAASlC,EAAU0C,GACxB,OAAIA,EACI,kCAAN,OAAyCA,GAElCC,CAEV,C","sources":["components/MovieList/MovieItem.jsx","components/MovieList/MovieList.jsx","pages/Home/Home.jsx","services/api.js","services/getImage.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport { getPoster } from 'services/getImage';\n\nexport const MovieItem = ({ id, title, name, poster_path }) => {\n  const location = useLocation();\n  const src = getPoster(poster_path);\n\n  return (\n    <li className=\"movie-item\" key={id}>\n      <Link to={`/movies/${id}`} state={{ from: location }}>\n        <img className=\"movie-poster\" src={src} alt={title || name} />\n        {title || name}\n      </Link>\n    </li>\n  );\n};\n\nMovieItem.propTypes = {\n  id: PropTypes.number,\n  title: PropTypes.string,\n  name: PropTypes.string,\n  poster_path: PropTypes.string,\n};\n","import PropTypes from 'prop-types';\nimport { MovieItem } from './MovieItem';\n\nexport const MovieList = ({ movies }) => {\n  return (\n    <ul>\n      {movies.map(movie => {\n        return (\n          <MovieItem\n            key={movie.id}\n            id={movie.id}\n            title={movie.title}\n            name={movie.name}\n            poster_path={movie.poster_path}\n          />\n        );\n      })}\n    </ul>\n  );\n};\n\nMovieList.propTypes = {\n  movies: PropTypes.array,\n};\n","import React from 'react';\nimport { useEffect, useState } from 'react';\nimport { ThreeDots } from 'react-loader-spinner';\n\nimport { MovieList } from 'components/MovieList/MovieList';\nimport { getTrandingMovies } from 'services/api';\n\nexport const Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchTrandingMovies = async () => {\n      try {\n        setLoading(true);\n        const moviesList = await getTrandingMovies();\n        setMovies(moviesList);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchTrandingMovies();\n  }, []);\n  return (\n    <div>\n      <p>Trending movies</p>\n      {loading && (\n        <ThreeDots\n          height=\"80\"\n          width=\"80\"\n          radius=\"9\"\n          color=\"#3f51b5\"\n          ariaLabel=\"three-dots-loading\"\n          wrapperStyle={{}}\n          wrapperClassName=\"\"\n          visible={true}\n        />\n      )}\n      <MovieList movies={movies} />\n    </div>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\nconst URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '6da8758eb40e221013709d63079fd9c4';\n\nconst getTrandingMovies = async () => {\n  const response = await axios.get(`${URL}trending/all/day?api_key=${API_KEY}`);\n\n  return response.data.results;\n};\n\nconst getMovies = async query => {\n  const response = await axios.get(\n    `${URL}search/movie?api_key=${API_KEY}&query=${query}`\n  );\n\n  return response.data.results;\n};\n\nconst getMovieDetails = async movieId => {\n  const response = await axios.get(`${URL}movie/${movieId}?api_key=${API_KEY}`);\n\n  return response.data;\n};\n\nconst getCastDetails = async movieId => {\n  const response = await axios.get(\n    `${URL}movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n\n  return response.data.cast;\n};\n\nconst getReview = async movieId => {\n  const response = await axios.get(\n    `${URL}movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n\n  console.log('review', response.data.results);\n  return response.data.results;\n};\n\nexport {\n  getTrandingMovies,\n  getMovies,\n  getMovieDetails,\n  getCastDetails,\n  getReview,\n};\n","import noPoster from '../images/No_image_poster.png';\nexport function getPoster(poster) {\n  if (poster) {\n    return `https://image.tmdb.org/t/p/w300${poster}`;\n  } else {\n    return noPoster;\n  }\n}\n"],"names":["MovieItem","id","title","name","poster_path","location","useLocation","src","getPoster","className","to","state","from","alt","MovieList","movies","map","movie","Home","useState","setMovies","loading","setLoading","useEffect","fetchTrandingMovies","getTrandingMovies","moviesList","console","log","height","width","radius","color","ariaLabel","wrapperStyle","wrapperClassName","visible","URL","API_KEY","axios","response","data","results","getMovies","query","getMovieDetails","movieId","getCastDetails","cast","getReview","poster","noPoster"],"sourceRoot":""}